name: MARU EGG CI-CD Workflow

on:
  push:
    branches: [ "main", "develop" ]

permissions:
  contents: read

jobs:
  integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Java JDK 설정
      - name: Setup Java JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      # 환경별 yml 파일 생성
      - name: make application.yml
        if: contains(github.ref, 'develop')
        run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.YML }}" > ./application.yml
        shell: bash

      # 환경별 yml 파일 생성 - dev
      - name: make application-dev.yml
        if: contains(github.ref, 'develop')
        run: |
          cd ./src/main/resources
          touch ./application-dev.yml
          echo "${{ secrets.YML_DEV }}" > ./application-dev.yml
        shell: bash

      # Gradle 패키지 캐시
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      # gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v3
        with:
          arguments: clean bootJar

      # Docker Hub에 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Metadata action
      - name: Metadata action
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_REPO }}

      # Docker image Build & push
      - name: Build and push Docker image
        if: contains(github.ref, 'develop')
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}-${{ github.run_number }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: integration

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check docker-compose.yml file
        run: |
          if [ ! -f docker/docker-compose.yml ]; then
            echo "Error: docker/docker-compose.yml not found."
            exit 1
          fi

      - name: Set environment variables for Docker Compose
        run: |
          echo "DOCKER_REPO=${{ secrets.DOCKER_REPO }}" >> $GITHUB_ENV
          echo "GITHUB_RUN_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV

      - name: Copy docker-compose into instance
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PUBLIC_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PEM_KEY }}
          source: "docker/docker-compose.yml"
          target: "/home/${{ secrets.USERNAME }}/docker/docker-compose.yml"
          strip_components: 3
          overwrite: true
          debug: true

      - name: Deploy to EC2 dev
        uses: appleboy/ssh-action@v0.1.0
        if: contains(github.ref, 'develop')
        with:
          host: ${{ secrets.PUBLIC_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PEM_KEY }}
          script: |
            cd /home/${{ secrets.USERNAME }}
            envsubst < <(echo "${{ secrets.DOCKER_COMPOSE_DEV }}") > docker-compose-dev.yml
            echo ${{ secrets.DOCKER_PASSWORD }} | sudo docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            if [ "$(sudo docker ps -q)" ]; then sudo docker stop $(sudo docker ps -q); fi
            if [ "$(sudo docker ps -a -q)" ]; then sudo docker rm $(sudo docker ps -a -q); fi
            sudo docker pull ${{ secrets.DOCKER_REPO }}:develop-${{ github.run_number }}
            sudo docker-compose -f docker-compose-dev.yml up -d
            sudo docker image prune -f
