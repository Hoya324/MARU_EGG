name: MARU EGG CI-CD Workflow

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches:
      - develop

# 권한 설정
permissions:
  contents: read

jobs:
  CI:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Setup Java JDK
      - name: Setup Java JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      # Cache Gradle packages
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      # Grant execute permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # gradle build
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 환경별 yml 파일 생성 - dev
      - name: make application-dev.yml
        if: contains(github.ref, 'develop')
        run: |
          cd ./src/main/resources
          touch ./application-dev.yml
          echo "${{ secrets.YML_DEV }}" > ./application-dev.yml
        shell: bash

      # Check if the JAR file exists
      - name: Check JAR file exists
        run: ls -al build/libs

      # Upload JAR file as artifact
      - name: Upload JAR file
        uses: actions/upload-artifact@v3
        with:
          name: maru-egg-be-jar
          path: build/libs/*.jar

  CD:
    runs-on: ubuntu-latest

    needs: CI

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Download JAR file from artifact
      - name: Download JAR file
        uses: actions/download-artifact@v3
        with:
          name: maru-egg-be-jar
          path: build/libs

      #      # Log in to Docker Hub
      #      - name: Log in to Docker Hub
      #        uses: docker/login-action@v1
      #        with:
      #          username: ${{ secrets.DOCKER_USERNAME }}
      #          password: ${{ secrets.DOCKER_PASSWORD }}
      #
      #      # Metadata action
      #      - name: Metadata action
      #        id: meta
      #        uses: docker/metadata-action@v4
      #        with:
      #          images: ${{ secrets.DOCKER_REPO }}

      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t spring-cicd .
          docker tag spring-cicd ${{ secrets.DOCKER_REPO }}:${GITHUB_SHA::7}
          docker push ${{ secrets.DOCKER_REPO }}:${GITHUB_SHA::7}

      - name: Deploy to EC2 dev
        uses: appleboy/ssh-action@master
        if: contains(github.ref, 'develop')
        with:
          host: ${{ secrets.PUBLIC_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            docker pull ${{ secrets.DOCKER_REPO }}:${GITHUB_SHA::7}
            docker tag ${{ secrets.DOCKER_REPO }}:${GITHUB_SHA::7}
            docker stop server
            docker run -d --rm --name server -p 80:8080 maru-egg
